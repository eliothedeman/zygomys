;; indendent invocations of same closure
;; should each get their own scope for that instantiation

(import "system")
(import "strings")
(defn new-closure [sym] (let* [a 1
                           f (fn [addme] (set a (+ a addme)) (strings/printf "a is now %v\n" a) a)] f))
(def g (new-closure 'hello_g))
(system/_closdump g)
(def h (new-closure 'hello_h))
(system/_closdump h)
(system/_closdump g) ;; showing hello_h arg!!!
(assert (== (g 1) 2))
;; if they are mistakenly sharing the same closure variables.
;; then the increment on g will have impacted h as well.
(assert (== (h 1) 2)) 


;; but two functions that closed over the same variable should
;; share it!

(defn factory []
  (let* [a [1] ;; a is shared by f and g!
        f (fn [addme] (aset! a 0 (+ (aget a 0) addme)) (aget a 0))
        g (fn [addme] (aset! a 0 (+ (aget a 0) addme)) (aget a 0))]
        (list f g)))

(def pair (factory))
(def one (first pair))
(def two (first (rest pair)))

(assert (== 1 (one 0)))
(assert (== 1 (two 0)))

(assert (== 2 (one 1)))
(assert (== 2 (two 0)))

(assert (== 3 (two 1)))
(assert (== 3 (one 0)))


(defn m [inp] (let* [a 2]
                    (let* [b 12]
                          (defn q [] (cond (!= 0 inp) (set a inp) ()) (system/printf "a is now %v\n" a)) q)))


